$colour_primary: #00249d;
$colour_secondary: #6cb3e1;
$colour_tertiary: #e2e8ff;
$colour_action: #00C994;
$colour_black: #302f2f;
$colour_grey: #ededed;
$colour_dark_grey: #5c5c5c;
$colour_border_grey: #5f5f5f;
$colour_error: #cc0000;
$font_primary: objektiv-mk2, sans-serif;

@mixin button() {
  @include button_custom($colour_action, lighten($colour_action, 5%));
}

@mixin button_custom($colour, $hover) {
  background: $colour;
  padding: 10px 40px;
  @if (lightness($colour) > 50) {
    color: $colour_black;
  } @else {
    color: #fff;
  }
  display: inline-block;
  transition: all 0.2s ease-in-out 0s;
  box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.16);
  max-width: 295px;
  text-align: center;
  line-height: 1.3;
  border: none;
  font-family: $font_primary;
  font-weight: 600;
  cursor: pointer;
  &:hover {
    background: $hover;
  }
}

@mixin list_style() {
  list-style: none;
  display: flex;
  align-items: center;
  margin: 10px;
  font-weight: 500;
  font-size: 22px;
  @include in_size($xs) {
    margin: 10px 0;
  }
  &:before {
    @include check-icon();
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    flex: 0 0 30px;
    background: #fff;
    border-radius: 50%;
    margin-right: 10px;
    color: $colour_action;
  }
}

@mixin check-icon() {
  content: "\f00c";
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: "icomoon" !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

$xxs: (
  max: 450px
);
$xs: (
  max: 767px
);
$sm: (
  min: 768px
);
$md: (
  min: 1260px
);
$lg: (
  min: 1400px
);
$sm-only: (
  min: map-get($sm, min),
  max: map-get($md, min) - 1
);
$md-only: (
  min: map-get($md, min),
  max: map-get($lg, min) - 1
);
$mobile: (
  max: map-get($md, min) - 1
);

@mixin in_size($map) {
  $query: "";

  @if map-has-key($map, min) {
    $query: append($query, "(min-width: #{map-get($map, min)})");
  }

  @if map-has-key($map, min) and map-has-key($map, max) {
    $query: append($query, "and");
  }

  @if map-has-key($map, max) {
    $query: append($query, "(max-width: #{map-get($map, max)})");
  }

  @media screen and #{$query} {
    @content;
  }
}

@mixin media($map) {
  @include in_size($map);
}
